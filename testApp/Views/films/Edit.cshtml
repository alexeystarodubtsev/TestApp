@model testApp.Models.films

@{
    ViewBag.Title = "Редактирование";
}

@using (Html.BeginForm("Edit", "Films", FormMethod.Post, new { enctype = "multipart/form-data"}))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
        <label class="control-label col-md-2" for="FilmName">Название</label>
        <div class="col-md-10">
            @Html.EditorFor(model => model.FilmName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Введите название", } })
            @Html.ValidationMessageFor(model => model.FilmName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2" for="Desctiption">Описание</label>
        <div class="col-md-10">
            @Html.TextAreaFor(m => m.Desctiption, new{
                                                       style = "Height:120px",
                                                       @class = "form-control",
                                                       @placeholder = "Введите описание",
                                                       @maxlength = "2000"
                                                   })
            @Html.ValidationMessageFor(model => model.Desctiption, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2" for="Director">Режиссер</label>
        <div class="col-md-10">
            @Html.EditorFor(model => model.Director, new { htmlAttributes = new { @class = "form-control", @placeholder = "Введите ФИО режиссера", } })
            @Html.ValidationMessageFor(model => model.Director, "", new { @class = "text-danger" })
        </div>
    </div>

    @Html.HiddenFor(model => model.Creator)

    <div class="form-group">
        <label class="control-label col-md-2" for="Year">Год</label>
        <div class="col-md-10">
            @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control", @placeholder = "Введите год фильма", } })
            @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2" for="ImageUrl" style="margin-top:10px">Постер</label>
        <div class="col-md-2">
            @Html.HiddenFor(model => model.ImageUrl)
            <img id="poster" src="@Url.Content(Model.ImageUrl)" class="col-md-12" style="display:normal" />
            <div id="bigFile" class="text-danger"></div>
            <label class="btn btn-default btn-file" style="margin-top:10px">
                Загрузить <input type="file" id ="InputFile" name="Image" style="display:none" accept="image/jpeg, image/png" onchange="getImage(this)">
            </label>
        </div>

    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Сохранить" class="btn btn-default" />
        </div>
    </div>
</div>
}

<script>
    function getImage(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            var filesize = input.files[0].size;
            if (filesize > 4190304) {
                document.getElementById("bigFile").innerText = "Превышен размер файла";
                $('#poster')
                    .attr('style', "display:none");
                document.getElementById("InputFile").value = null;
            }
            else {
                reader.onload = function (e) {
                    $('#poster')
                        .attr('src', e.target.result)
                        .addClass("col-md-12")
                        .attr('style', "display:normal");
                    document.getElementById("bigFile").innerText = null;
                };
                reader.readAsDataURL(input.files[0]);
            }
        }
    }

</script>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
